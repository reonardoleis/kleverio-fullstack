{"version":3,"sources":["logo.svg","api/api.js","components/ConfirmedBalance.js","components/UnconfirmedBalance.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","getBalance","address","a","get","apiUrl","response","confirmed","data","unconfirmed","ConfirmedBalance","props","Card","Content","Header","Icon","name","Divider","CardDescription","as","textAlign","value","UnconfirmedBalance","App","useState","fetched","balance","setBalance","loading","setLoading","errorModal","setErrorModal","undefined","autoUpdateInterval","setAutoUpdateInterval","currentAddress","setCurrentAddress","fetchData","document","getElementById","validate","fetchedBalance","className","Container","centered","Image","src","logo","size","style","marginTop","Label","pointing","Input","icon","id","placeholder","Button","color","textTransform","onClick","Transition","duration","hide","show","visible","Checkbox","slider","label","clearInterval","setInterval","Group","Modal","open","onClose","Actions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.478b9a80.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.0a1a8d99.svg\";","const axios = require('axios');\r\n\r\nconst apiUrl = process.env.REACT_APP_API_ADDRESS;\r\n\r\nconst getBalance = async (address) => {\r\n  let response = await axios.get(apiUrl + '/balance/' + address);\r\n  return { confirmed: response.data.confirmed, unconfirmed: response.data.unconfirmed };\r\n}\r\n\r\n\r\n\r\nexport { getBalance };","import { Header, Icon, Card, CardDescription, Divider } from \"semantic-ui-react\";\r\n\r\nconst ConfirmedBalance = (props) => {\r\n  return (\r\n    <Card>\r\n      <Card.Content>\r\n        <Header>\r\n          <Icon name=\"check circle outline\"/>\r\n          <Header.Content>Confirmed</Header.Content>\r\n        </Header>\r\n        <Divider/>\r\n        <CardDescription>\r\n          <Header as=\"h1\" textAlign=\"center\">\r\n            { props.value }\r\n          </Header>\r\n        </CardDescription>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ConfirmedBalance;\r\n","import { Header, Icon, Card, CardDescription, Divider } from \"semantic-ui-react\";\r\n\r\nconst UnconfirmedBalance = (props) => {\r\n  return (\r\n    <Card>\r\n      <Card.Content>\r\n        <Header>\r\n          <Icon name=\"clock outline\"/>\r\n          <Header.Content>Unconfirmed</Header.Content>\r\n        </Header>\r\n        <Divider/>\r\n        <CardDescription>\r\n          <Header as=\"h1\" textAlign=\"center\">\r\n            { props.value }\r\n          </Header>\r\n        </CardDescription>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default UnconfirmedBalance;\r\n","import logo from \"./logo.svg\";\nimport { useState } from \"react\";\nimport { validate } from \"bitcoin-address-validation\";\nimport \"./App.css\";\nimport {\n  Container,\n  Image,\n  Header,\n  Input,\n  Label,\n  Button,\n  Divider,\n  Card,\n  Transition,\n  Modal,\n  Checkbox,\n} from \"semantic-ui-react\";\n\nimport { getBalance } from \"./api/api\";\n\nimport ConfirmedBalance from \"./components/ConfirmedBalance\";\nimport UnconfirmedBalance from \"./components/UnconfirmedBalance\";\nfunction App() {\n  const [balance, setBalance] = useState({\n    confirmed: 0,\n    unconfirmed: 0,\n    fetched: false,\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [errorModal, setErrorModal] = useState(false);\n  const [autoUpdateInterval, setAutoUpdateInterval] = useState(undefined);\n  const [currentAddress, setCurrentAddress] = useState(\"\");\n\n  const fetchData = async () => {\n    let address = currentAddress !== '' ? currentAddress : document.getElementById(\"search\").value ;\n    if (!validate(address)) {\n      setErrorModal(true);\n    } else {\n      setCurrentAddress(address);\n      setLoading(true);\n      setBalance({ ...balance, fetched: false });\n      let fetchedBalance = await getBalance(address);\n      fetchedBalance.fetched = true;\n      setBalance(fetchedBalance);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"primary-color main-container\">\n      <Container centered=\"true\">\n        <Image src={logo} size=\"small\" centered />\n        <Header as=\"h1\" className=\"text-white\" textAlign=\"center\">\n          Full-Stack Challenge\n        </Header>\n      </Container>\n      <Container\n        centered=\"true\"\n        style={{ marginTop: \"2rem\" }}\n        textAlign=\"center\"\n      >\n        <Label pointing=\"below\" size=\"large\">\n          Enter a bitcoin address\n        </Label>\n        <br></br>\n        <Input\n          icon=\"search\"\n          id=\"search\"\n          placeholder=\"1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX\"\n          size=\"huge\"\n          loading={loading}\n        />\n        <br></br>\n        <Button\n          size=\"huge\"\n          color=\"violet\"\n          style={{ textTransform: \"uppercase\" }}\n          onClick={fetchData}\n        >\n          Get balance\n        </Button>\n        <br></br>\n        <Transition\n          duration={{ hide: 150, show: 150 }}\n          visible={currentAddress !== \"\"}\n        >\n          <Label size=\"large\" style={{ marginTop: \"1rem\" }}>\n            <Checkbox\n              slider\n              label=\"Auto-update\"\n              onClick={() => {\n                if (autoUpdateInterval !== undefined) {\n                  clearInterval(autoUpdateInterval);\n                  setAutoUpdateInterval(undefined);\n                } else {\n                  setAutoUpdateInterval(\n                    setInterval(() => {\n                      fetchData();\n                    }, 1000)\n                  );\n                }\n              }}\n            />\n          </Label>\n        </Transition>\n      </Container>\n      \n      <Transition duration={{ hide: 150, show: 150 }} visible={balance.fetched || autoUpdateInterval !== undefined}>\n        <Container>\n        <Divider />\n          <Card.Group centered>\n            <ConfirmedBalance value={balance.confirmed} />\n            <UnconfirmedBalance value={balance.unconfirmed} />\n          </Card.Group>\n        </Container>\n      </Transition>\n      <Modal\n        size=\"mini\"\n        open={errorModal}\n        onClose={() => {\n          setErrorModal(false);\n        }}\n      >\n        <Modal.Content>\n          You should specify a valid bitcoin address.\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            color=\"violet\"\n            onClick={() => {\n              setErrorModal(false);\n            }}\n          >\n            Ok\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}